{"config": {"lang": ["en"], "separator": "[\\s\\u200b\\-]", "pipeline": ["stemmer"]}, "docs": [{"location": "", "title": "\u6b22\u8fce\ud83d\udc4f", "text": "<p>\u8fd9\u91cc\u662fxiu\u7684\u7b14\u8bb0\u672c\u54e6  \u03c3`\u2200\u00b4)\u03c3</p>"}, {"location": "misc/Bonus/1/", "title": "Python \u4e2d\u7684\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e", "text": "<p>Note</p> <p>\u624d...\u624d\u4e0d\u662f\u56e0\u4e3a\u4f1a\u670915%\u7684bonus\u624d\u5199\u7684\u5462\uff01\uff08</p> <p>\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\uff0cPython \u4e5f\u4e0d\u4f8b\u5916\u3002\u7279\u522b\u662f Python \u7684 pickle \u6a21\u5757\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\uff0c\u5bb9\u6613\u6210\u4e3a\u653b\u51fb\u8005\u7684\u76ee\u6807\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u63a2\u8ba8 Python \u4e2d\u7684\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u3001\u5e38\u89c1\u653b\u51fb\u65b9\u6cd5\u53ca\u5176\u9632\u62a4\u63aa\u65bd\u3002</p>"}, {"location": "misc/Bonus/1/#_1", "title": "\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u6982\u8ff0", "text": "<p>\u53cd\u5e8f\u5217\u5316\u662f\u5c06\u5e8f\u5217\u5316\u6570\u636e\uff08\u901a\u5e38\u662f\u4e8c\u8fdb\u5236\u6216\u5b57\u7b26\u4e32\u5f62\u5f0f\uff09\u91cd\u65b0\u8f6c\u6362\u4e3a\u5bf9\u8c61\u7684\u8fc7\u7a0b\u3002\u5e8f\u5217\u5316\u7528\u4e8e\u6301\u4e45\u5316\u5bf9\u8c61\u6216\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u5bf9\u8c61\u3002\u7136\u800c\uff0c\u5982\u679c\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\u5904\u7406\u4e86\u6076\u610f\u6784\u9020\u7684\u6570\u636e\uff0c\u53ef\u80fd\u5bfc\u81f4\u4efb\u610f\u4ee3\u7801\u6267\u884c\uff08Remote Code Execution, RCE\uff09\uff0c\u8fdb\u800c\u5371\u53ca\u7cfb\u7edf\u5b89\u5168\u3002</p>"}, {"location": "misc/Bonus/1/#pickle", "title": "pickle \u6a21\u5757\u53ca\u5176\u5371\u9669\u6027", "text": "<p>pickle \u662f Python \u5185\u7f6e\u7684\u5e8f\u5217\u5316\u6a21\u5757\uff0c\u652f\u6301\u5e8f\u5217\u5316\u51e0\u4e4e\u6240\u6709 Python \u5bf9\u8c61\u3002\u5b83\u7684\u5f3a\u5927\u529f\u80fd\u4f7f\u5176\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u975e\u5e38\u6709\u7528\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u5b89\u5168\u98ce\u9669\uff0c\u56e0\u4e3a pickle \u53ef\u4ee5\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u5305\u542b\u4efb\u610f\u4ee3\u7801\u7684\u5bf9\u8c61\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684 pickle \u4f7f\u7528\u793a\u4f8b\uff1a</p> Python<pre><code>import pickle\n\n# \u5e8f\u5217\u5316\u5bf9\u8c61\ndata = {'key': 'value'}\nserialized_data = pickle.dumps(data)\n\n# \u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\ndeserialized_data = pickle.loads(serialized_data)\nprint(deserialized_data)\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cpickle.dumps \u5c06\u5b57\u5178\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a\u5b57\u8282\u6570\u636e\uff0cpickle.loads \u5219\u5c06\u5176\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u5bf9\u8c61\u3002\u5c3d\u7ba1\u6b64\u8fc7\u7a0b\u770b\u4f3c\u5b89\u5168\uff0c\u4f46\u5982\u679c\u53cd\u5e8f\u5217\u5316\u7684\u6570\u636e\u6765\u81ea\u4e0d\u53ef\u4fe1\u6765\u6e90\uff0c\u53ef\u80fd\u5f15\u53d1\u5b89\u5168\u95ee\u9898\u3002</p>"}, {"location": "misc/Bonus/1/#_2", "title": "\u6076\u610f\u53cd\u5e8f\u5217\u5316\u793a\u4f8b", "text": "<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684\u5e8f\u5217\u5316\u6570\u636e\uff0c\u53cd\u5e8f\u5217\u5316\u8be5\u6570\u636e\u5c06\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528 pickle \u8fdb\u884c\u653b\u51fb\uff1a</p> Python<pre><code>import pickle\nimport os\n\n# \u521b\u5efa\u6076\u610f\u6570\u636e\nclass Malicious:\n    def __reduce__(self):\n        return (os.system, ('ls',))\n\nmalicious_data = pickle.dumps(Malicious())\n\n# \u53cd\u5e8f\u5217\u5316\u6076\u610f\u6570\u636e\npickle.loads(malicious_data)\n</code></pre> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a Malicious \u7c7b\uff0c\u5176 reduce \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u548c\u53c2\u6570\u5143\u7ec4\u3002\u8fd9\u4f1a\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u6267\u884c os.system('ls')\uff0c\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u5185\u5bb9\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528\u7c7b\u4f3c\u624b\u6bb5\u6267\u884c\u4efb\u610f\u7cfb\u7edf\u547d\u4ee4\u3002</p>"}, {"location": "misc/Bonus/1/#_3", "title": "\u9632\u62a4\u63aa\u65bd", "text": "<p>\u4e3a\u4e86\u9632\u6b62\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\uff0c\u5efa\u8bae\u91c7\u53d6\u4ee5\u4e0b\u9632\u62a4\u63aa\u65bd\uff1a</p> <ol> <li> <p>\u907f\u514d\u4f7f\u7528 pickle \u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u6570\u636e\uff1apickle \u7684\u7075\u6d3b\u6027\u4f7f\u5176\u5728\u5904\u7406\u4e0d\u53d7\u4fe1\u4efb\u7684\u6570\u636e\u65f6\u975e\u5e38\u5371\u9669\u3002\u5c3d\u91cf\u907f\u514d\u4f7f\u7528 pickle \u53cd\u5e8f\u5217\u5316\u6765\u81ea\u4e0d\u53ef\u4fe1\u6765\u6e90\u7684\u6570\u636e\u3002</p> </li> <li> <p>\u4f7f\u7528\u66f4\u5b89\u5168\u7684\u5e8f\u5217\u5316\u6a21\u5757\uff1a   \u5982\u679c\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u590d\u6742\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5b89\u5168\u7684\u5e8f\u5217\u5316\u6a21\u5757\uff0c\u5982 <code>json</code>\u3002<code>json</code> \u6a21\u5757\u53ea\u652f\u6301\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4e0d\u4f1a\u6267\u884c\u4ee3\u7801\uff0c\u4ece\u800c\u66f4\u5b89\u5168\u3002</p> </li> </ol> Python<pre><code>import json\n\n# \u5e8f\u5217\u5316\ndata = {'key': 'value'}\nserialized_data = json.dumps(data)\n\n# \u53cd\u5e8f\u5217\u5316\ndeserialized_data = json.loads(serialized_data)\nprint(deserialized_data)\n</code></pre> <ol> <li> <p>\u9a8c\u8bc1\u548c\u6e05\u7406\u8f93\u5165\u6570\u636e\uff1a    - \u5728\u53cd\u5e8f\u5217\u5316\u4e4b\u524d\uff0c\u5c3d\u53ef\u80fd\u9a8c\u8bc1\u6570\u636e\u7684\u6765\u6e90\u548c\u683c\u5f0f\uff0c\u786e\u4fdd\u5176\u5b89\u5168\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b7e\u540d\u548c\u54c8\u5e0c\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u771f\u5b9e\u6027\u3002</p> </li> <li> <p>\u4f7f\u7528\u53d7\u9650\u73af\u5883\uff1a    - \u5982\u679c\u5fc5\u987b\u4f7f\u7528 pickle\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u53d7\u9650\u73af\u5883\u4e2d\u8fd0\u884c\u53cd\u5e8f\u5217\u5316\u4ee3\u7801\uff0c\u4f8b\u5982\u4f7f\u7528\u6c99\u7bb1\uff08sandbox\uff09\u6280\u672f\u6216\u5176\u4ed6\u9694\u79bb\u673a\u5236\uff0c\u9650\u5236\u4ee3\u7801\u6267\u884c\u7684\u6743\u9650\u3002</p> </li> <li> <p>\u9650\u5236\u53ef\u53cd\u5e8f\u5217\u5316\u7684\u7c7b\uff1a    - \u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49 Unpickler \u7c7b\u5e76\u8986\u76d6\u5176 find_class \u65b9\u6cd5\uff0c\u9650\u5236\u53cd\u5e8f\u5217\u5316\u65f6\u53ef\u7528\u7684\u7c7b\uff0c\u4ece\u800c\u51cf\u5c11\u653b\u51fb\u9762\u3002</p> </li> </ol> Python<pre><code>import pickle\n\nclass RestrictedUnpickler(pickle.Unpickler):\n    def find_class(self, module, name):\n        if module == \"builtins\" and name in {\"list\", \"dict\", \"set\", \"tuple\"}:\n            return super().find_class(module, name)\n        raise pickle.UnpicklingError(f\"global '{module}.{name}' is forbidden\")\n\ndef restricted_loads(s):\n    return RestrictedUnpickler(io.BytesIO(s)).load()\n</code></pre>"}, {"location": "misc/Bonus/1/#_4", "title": "\u7ed3\u8bba", "text": "<p>\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\uff0c\u5728 Python \u4e2d\u5c24\u4e3a\u503c\u5f97\u5173\u6ce8\u3002\u5f00\u53d1\u8005\u5e94\u5f53\u5145\u5206\u4e86\u89e3\u53cd\u5e8f\u5217\u5316\u7684\u98ce\u9669\uff0c\u5e76\u91c7\u53d6\u9002\u5f53\u7684\u9632\u62a4\u63aa\u65bd\uff0c\u907f\u514d\u5c06\u5e94\u7528\u7a0b\u5e8f\u66b4\u9732\u5728\u6f5c\u5728\u7684\u5b89\u5168\u5a01\u80c1\u4e2d\u3002\u901a\u8fc7\u8c28\u614e\u9009\u62e9\u5e8f\u5217\u5316\u6a21\u5757\u3001\u9a8c\u8bc1\u8f93\u5165\u6570\u636e\u3001\u4f7f\u7528\u53d7\u9650\u73af\u5883\u548c\u9650\u5236\u53cd\u5e8f\u5217\u5316\u7c7b\uff0c\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u5e26\u6765\u7684\u98ce\u9669\u3002</p>"}, {"location": "yuyan/C/", "title": "C\u5c0f\u7a0b", "text": "<p>\u8fd9\u662f\u6211\u5927\u4e00\u4e0a\u5b66\u671f\u6f66\u6f66\u8349\u8349\u505a\u51fa\u6765\u7684......</p> <p>\u7b97\u662f\u6211\u7684\u7b2c\u4e00\u672c\u7b14\u8bb0\u5427</p> <p>Note</p> <p>\u8d44\u6599\u6bd4\u8f83\u6b8b\u7f3a\u4e0d\u5168\uff0c\u4e0d\u5efa\u8bae\u89c2\u770b</p>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%89%8D%E7%9E%BB/", "title": "0.0 \u57fa\u7840\u77e5\u8bc6", "text": "<ol> <li>\u6c47\u7f16\u8bed\u8a00\u5c5e\u4e8e\u9762\u5411\u673a\u5668\u8bed\u8a00\uff0c\u9ad8\u7ea7\u8bed\u8a00\u5c5e\u4e8e\u9762\u5411\u95ee\u9898\u7684\u8bed\u8a00\u3002</li> <li>\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u79f0\u4e3a\u6e90\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u89e3\u91ca\u7a0b\u5e8f\u7ffb\u8bd1\u4e00\u53e5\u6267\u884c\u4e00\u53e5\u7684\u65b9\u5f0f\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u7a0b\u5e8f\u4e00\u6b21\u7ffb\u8bd1\u4ea7\u751f\u76ee\u6807\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u7136\u540e\u6267\u884c\u3002</li> <li>\u5728C\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u5141\u8bb8\u51fa\u73b0\u7684\u5b57\u7b26\u96c6\u662f\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0852\u4e2a\uff09\u3001\u6570\u5b57\uff0810\u4e2a\uff09\u3001\u952e\u76d8\u7b26\u53f7\uff0833\u4e2a\u548c\u8f6c\u4e49\u5b57\u7b26\u3002</li> <li>\u8f6c\u4e49\u5b57\u7b26\u662f\u7531\\\u7b26\u53f7\u5f00\u59cb\u7684\u5355\u4e2a\u5b57\u7b26\u6216\u82e5\u5e72\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u3002</li> <li>C\u8bed\u8a00\u7684\u7a0b\u5e8f\u4e2d\u6709\u7279\u6b8a\u542b\u4e49\u7684\u82f1\u8bed\u5355\u8bcd\u79f0\u4e3a\u4fdd\u7559\u5b57\u3002</li> <li>\u6807\u8bc6\u7b26\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4e00\u79cd\u5b57\u7b26\u5e8f\u5217\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u7a0b\u5e8f\u4e2d\u9700\u8981\u8fa8\u8ba4\u7684\u5bf9\u8c61\u3002</li> <li>C\u8bed\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u7684\u5b9a\u4e49\u89c4\u5219\u662f\u7531\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u4e00\u4e32\u7b26\u53f7\u3002</li> <li>C\u8bed\u8a00\u8bcd\u7c7b\u4e3b\u8981\u5206\u4e3a\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u3001\u51fd\u6570\u8c03\u7528\u3001\u8868\u8fbe\u5f0f\u3001\u4fdd\u7559\u5b57\u7b496\u7c7b\u3002</li> <li>C\u8bed\u8a00\u7684\u8bed\u53e5\u4e3b\u8981\u5206\u4e3a\u6570\u636e\u5b9a\u4e49\u8bed\u53e5\u3001\u8d4b\u503c\u8bed\u53e5\u3001\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u3001\u8868\u8fbe\u5f0f\u8bed\u53e5\u3001\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5\u3001\u590d\u5408\u8bed\u53e5\u3001\u7a7a\u8bed\u53e5\u548c\u5176\u4ed6\u8bed\u53e5\u7b498\u7c7b\u3002</li> <li>C\u7a0b\u5e8f\u662f\u7531\u51fd\u6570\u6784\u6210\u7684\u3002\u5176\u4e2d\u6709\u5e76\u4e14\u53ea\u80fd\u67091\u4e2a\u4e3b\u51fd\u6570\u3002C\u8bed\u8a00\u7a0b\u5e8f\u7684\u6267\u884c\u603b\u662f\u7531\u4e3b\u51fd\u6570\u5f00\u59cb\uff0c\u5e76\u4e14\u5728\u4e3b\u51fd\u6570\u4e2d\u7ed3\u675f\u3002</li> <li>C\u8bed\u8a00\u7a0b\u5e8f\u7684\u6ce8\u91ca\u53ef\u4ee5\u51fa\u73b0\u5728\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u5b83\u662f\u4ee5\\/*\u7b26\u53f7\u4f5c\u4e3a\u5f00\u59cb\u6807\u8bb0\uff0c\u4ee5*/\u7b26\u53f7\u4f5c\u4e3a\u7ed3\u675f\u6807\u8bb0\u3002</li> </ol>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/", "title": "1.1\u6807\u8bc6\u7b26", "text": ""}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#111", "title": "1.1.1\u6807\u8bc6\u7b26\u7684\u7ec4\u6210\u89c4\u5219", "text": "<ol> <li>\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210</li> <li>\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf</li> <li>\u5b57\u6bcd\u8981\u533a\u5206\u5927\u5c0f\u5199</li> <li>\u4e0d\u80fd\u4e0e\u5173\u952e\u5b57\u540c\u540d</li> </ol>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#112", "title": "1.1.2\u6709\u6548\u957f\u5ea6", "text": "<p>\u524d31\u4e2a\u5b57\u7b26</p>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#113", "title": "1.1.3\u5173\u952e\u5b57", "text": "<p>Which one below is NOT a keyword of the C programming language? ____   A. define  B. if C. typedef D. while</p> <p>A <code>define</code>\u00a0\u4e0d\u662f\u5173\u952e\u5b57\uff0c\u662f\u9884\u5904\u7406\u6307\u4ee4\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u00a0<code>int define;</code>\u00a0\u800c\u00a0<code>if</code>\u3001<code>typedef</code>\u3001<code>while</code>\u00a0\u663e\u7136\u90fd\u662f\u5173\u952e\u5b57\u3002</p> <p>Which one below is NOT a valid identifier in the C programming language? ____  A. printf B.  _ever C. \"char\" D. true</p> <p>C\uff0c\u56e0\u4e3a\u00a0<code>int \"char\";</code>\u00a0\u80af\u5b9a\u662f\u975e\u6cd5\u7684\uff0c\u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\u3002\u5bf9\u4e8e\u00a0A\uff0cprintf\u00a0\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u4e0d\u662f\u5173\u952e\u5b57\uff0c\u6240\u4ee5\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u00a0D\uff0cC\u00a0\u8bed\u8a00\u4e2d\u00a0true\u00a0\u5e76\u4e0d\u662f\u5173\u952e\u5b57\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002</p>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#12", "title": "1.2\u8f93\u5165\u4e0e\u8f93\u51fa", "text": ""}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#121-printf", "title": "1.2.1 printf", "text": "<p>\u8f6c\u5316\u58f0\u660e\u7b26</p> \u7c7b\u578b \u683c\u5f0f\u5b57\u7b26\u4e32 \u8f93\u51fa\u5f62\u5f0f \u6574\u5f62 %d \u5e26\u7b26\u53f7\u7684\u5341\u8fdb\u5236 \u6574\u578b %o \u65e0\u7b26\u53f7\u7684\u516b\u8fdb\u5236 \u6574\u578b %x \u65e0\u7b26\u53f7\u7684\u5341\u516d\u8fdb\u5236 \u6574\u578b %u \u65e0\u7b26\u53f7\u7684\u5341\u8fdb\u5236 \u6d6e\u70b9\u578b %f \u5c0f\u6570\uff0c6\u4f4d \u6d6e\u70b9\u578b %e \u6307\u6570\uff0c6\u4f4d \u6d6e\u70b9\u578b %g \u4f18\u5316\u7684\u5c0f\u6570\uff08\u53bb\u6389\u65e0\u610f\u4e49\u76840\uff09 \u5b57\u7b26\u578b %c \u5b57\u7b26 \u5b57\u7b26\u578b %s \u5b57\u7b26\u4e32 <p>\u9644\u52a0\u683c\u5f0f</p> \u5b57\u7b26 \u8f93\u51fa %md \u5f53\u6570\u636e\u957f\u5ea6&lt;m\u65f6\uff0c\u5de6\u8865\u7a7a\u683c\uff0c\u5426\u5219\u6309\u5b9e\u9645\u8f93\u51fa ^1 %nf \u6307\u5b9a\u5c0f\u6570\u70b9\u540e\u4f4d\u6570\uff08\u56db\u820d\u4e94\u5165\uff09 %ns \u5bf9\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u6307\u5b9a\u4f4d\u6570 %-md \u8f93\u5165\u6570\u636e\u5728\u57df\u5185\u5de6\u5bf9\u9f50 %+md \u5728\u6709\u7b26\u53f7\u7684\u6b63\u6570\u524d\u52a0\u6b63\u53f7 %0md \u5728\u5de6\u8fb9\u7684\u7a7a\u683c\u75280\u8865 %#o \u5728\u516b\u8fdb\u5236\u524d\u663e\u793a0 %#x \u5728\u5341\u516d\u8fdb\u5236\u524d\u663e\u793a0x %ld \u5728d,o,x,u\u524d\uff0clong\u578b %lf \u5728e,f,g\u524d\uff0cdouble\u578b <p>\u91cd\u70b9</p> <p>\u5173\u4e8e%e\u7684\u7528\u6cd5</p> <p>\u5728C\u8bed\u8a00\u4e2d\uff0c<code>%e</code>\u662f\u7528\u4e8e\u683c\u5f0f\u5316\u8f93\u51fa\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u63a7\u5236\u7b26\u3002\u5b83\u8868\u793a\u4ee5\u6307\u6570\u5f62\u5f0f\u8f93\u51fa\u6d6e\u70b9\u6570\uff0c\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\"e\"\u8868\u793a\u6307\u6570\u90e8\u5206\u3002\u5177\u4f53\u6765\u8bf4\uff0c<code>%e</code>\u5c06\u6d6e\u70b9\u6570\u8868\u793a\u4e3a<code>[-]d.ddddde\u00b1dd</code>\u7684\u5f62\u5f0f\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a<code>d</code>\u662f\u6574\u6570\u90e8\u5206\uff0c\u540e\u9762\u7684\u5c0f\u6570\u90e8\u5206\u4ee5\u53ca\u6307\u6570\u90e8\u5206\u90fd\u7528\u5c0f\u5199\u5b57\u6bcd\"e\"\u8868\u793a\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    double number = 12345.6789;\n    printf(\"Number in scientific notation: %e\\n\", number);\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u5c06\u8f93\u51fa\uff1a</p> Text Only<pre><code>Number in scientific notation: 1.234568e+004\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>%e</code>\u5c06<code>12345.6789</code>\u683c\u5f0f\u5316\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u5f62\u5f0f\uff0c\u5373<code>1.234568e+04</code>\u3002\u6307\u6570\u90e8\u5206\u8868\u793a10\u7684\u5e42\uff0c\u56e0\u6b64<code>e+04</code>\u8868\u793a10\u76844\u6b21\u65b9\u3002</p> <p>%e\u4e5f\u53ef\u4ee5\u4e0e\u5176\u4ed6\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u8bed\u6cd5\u76f8\u7ed3\u5408</p> C<pre><code>printf(\"%12.3e\",918.48);\n</code></pre> <p>\u8fd9\u5c06\u4f1a\u8f93\u51fa</p> <p><code>9.185e+002</code></p> <p><code>printf(\"%12.3e\", 918.48)</code> \u662f\u4e00\u4e2a\u683c\u5f0f\u5316\u8f93\u51fa\u8bed\u53e5\uff0c\u5b83\u4f7f\u7528\u4e86 <code>%e</code> \u683c\u5f0f\u63a7\u5236\u7b26\u6765\u8868\u793a\u6d6e\u70b9\u6570\uff0c\u5e76\u4e14\u5305\u542b\u4e86\u4e00\u4e9b\u5bbd\u5ea6\u548c\u7cbe\u5ea6\u7684\u8bbe\u7f6e\u3002\u8ba9\u6211\u4eec\u9010\u4e2a\u89e3\u91ca\u8fd9\u4e2a\u8bed\u53e5\uff1a</p> <ul> <li><code>%e</code>: \u8868\u793a\u4ee5\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u5f62\u5f0f\u8f93\u51fa\u6d6e\u70b9\u6570\u3002</li> <li><code>%12.3e</code>: \u8fd9\u4e2a\u90e8\u5206\u4e2d\u7684\u6570\u5b57\u63a7\u5236\u4e86\u8f93\u51fa\u7684\u683c\u5f0f\u3002</li> <li><code>12</code>: \u8868\u793a\u8f93\u51fa\u7684\u603b\u5bbd\u5ea6\u4e3a12\u4e2a\u5b57\u7b26\uff0c\u5305\u62ec\u5c0f\u6570\u70b9\u548c\u6307\u6570\u90e8\u5206\u3002</li> <li><code>.3</code>: \u8868\u793a\u8f93\u51fa\u7684\u5c0f\u6570\u90e8\u5206\u7cbe\u786e\u52303\u4f4d\u3002</li> <li><code>e</code>: \u8868\u793a\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u6d6e\u70b9\u6570\u3002</li> </ul> <p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5e94\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u5230 <code>918.48</code> \u8fd9\u4e2a\u6d6e\u70b9\u6570\uff1a</p> <ol> <li>\u6d6e\u70b9\u6570 <code>918.48</code> \u4ee5\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u4e3a <code>9.1848e+02</code>\u3002</li> <li>\u603b\u5bbd\u5ea6\u4e3a12\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u5728\u8f93\u51fa\u4e2d\u4f1a\u586b\u5145\u4e00\u4e9b\u7a7a\u683c\uff0c\u4f7f\u5f97\u6574\u4e2a\u8f93\u51fa\u5360\u636e12\u4e2a\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002</li> <li>\u5c0f\u6570\u90e8\u5206\u7cbe\u786e\u52303\u4f4d\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u5c0f\u6570\u90e8\u5206\u662f <code>.185</code>\u3002</li> <li>\u6700\u7ec8\u8f93\u51fa\u4e3a <code>\"  9.185e+002\"</code>\u3002</li> </ol> <p>\u8fd9\u6837\uff0c<code>printf(\"%12.3e\", 918.48)</code> \u5c06\u4f1a\u8f93\u51fa <code>\"   9.185e+002\"</code>\u3002</p>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#122-scanf", "title": "1.2.2 scanf", "text": "C<pre><code>scanf(\"%4d%2d\",&amp;a,&amp;b);\n</code></pre> <p>\u82e5\u8f93\u5165123456\uff0c\u5219a=1234\uff0cb=56</p> C<pre><code>//\u82e5\u5728%\u540e\u6709*\u8bf4\u660e\u7b26\uff0c\u5219\u8868\u793a\u672c\u6b21\u8f93\u5165\u4e0d\u4f20\u7ed9\u4efb\u610f\u503c\nscanf(\"%2d%*3d%2d\",&amp;a,&amp;b);\n</code></pre> <p>\u82e5\u8f93\u51651234567 \u5219a=12\uff0cb=67</p> C<pre><code>scanf(\"%.2f\",&amp;a);\n</code></pre> <p>\u4e0d\u5408\u6cd5</p> C<pre><code>scanf(\"%[^m]\",&amp;a);\n</code></pre> <p>\u975e\u5e38\u5389\u5bb3\uff0cm\u662f\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e00\u76f4\u8bfb\u5230m\u5b57\u7b26\u4e3a\u6b62\u3002</p>"}, {"location": "yuyan/C/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#_1", "title": "\u672c\u7ae0\u505a\u9898\u5206\u6790", "text": "<p>class\u4e0d\u53ef\u4ee5\u7528\u4f5c\u7528\u6237\u6807\u8bc6\u7b26\uff0c\u56e0\u4e3a\u4ed6\u662fC++\u4e2d\u7684\u5173\u952e\u5b57</p> <p>C<pre><code>scanf(\"a=%d,b=%d\",&amp;a,&amp;b);\n</code></pre> \u8fd9\u6761\u8bed\u53e5\u662f\u5408\u6cd5\u7684</p> <p>include \u4e0d\u662fC\u8bed\u8a00\u4e2d\u7684\u5173\u952e\u5b57</p> C<pre><code>int a = 1234;\nprintf(\"%2d\",a);\n</code></pre> <p>\u6b64\u65f6\u8f93\u51fa\u7684\u662f1234\uff0c\u56e0\u4e3a[[#^1]]</p> C<pre><code>int a,b,c;\na=b=c=5;\n</code></pre> <p>\u8fd9\u662f\u5408\u6cd5\u7684\u3002\u800c C<pre><code>int a=b=c=5;\n</code></pre> \u8fd9\u662f\u4e0d\u5408\u6cd5\u7684\u3002</p>"}, {"location": "yuyan/C/%E5%85%B3%E9%94%AE%E5%AD%97/", "title": "2.5 \u5173\u952e\u5b57", "text": "\u5173\u952e\u5b57 \u4f5c\u7528 auto \u58f0\u660e\u81ea\u52a8\u53d8\u91cf break \u8df3\u51fa\u5f53\u524d\u5faa\u73af case char const continue default do double else enum extern \u58f0\u660e\u53d8\u91cf\u6216\u51fd\u6570\u662f\u5728\u5176\u4ed6\u6587\u4ef6\u6216\u672c\u6587\u4ef6\u5176\u4ed6\u4f4d\u7f6e\u5b9a\u4e49 float for goto if int long register \u58f0\u660e\u5bc4\u5b58\u5668\u53d8\u91cf return short signed sizeof static \u58f0\u660e\u9759\u6001\u53d8\u91cf struct switch typedef unsigned \u58f0\u660e\u65e0\u7b26\u53f7\u7c7b\u578b\u53d8\u91cf\u6216\u51fd\u6570 union \u58f0\u660e\u5171\u7528\u4f53\u7c7b\u578b void volatile \u8bf4\u660e\u53d8\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53ef\u88ab\u9690\u542b\u5730\u6539\u53d8 while"}, {"location": "yuyan/C/%E5%BE%AA%E7%8E%AF/", "title": "4.1 for", "text": "<p>for( ; ; ) \u8868\u8fbe\u5f0f\u90fd\u53ef\u7531\u5305\u542b\u9017\u53f7\u8fd0\u7b97\u7b26\u7684\u591a\u4e2a\u8868\u8fbe\u5f0f\u7ec4\u6210\u3002</p>"}, {"location": "yuyan/C/%E5%BE%AA%E7%8E%AF/#42", "title": "4.2 \u8f85\u52a9\u63a7\u5236\u8bed\u53e5", "text": ""}, {"location": "yuyan/C/%E5%BE%AA%E7%8E%AF/#421-break", "title": "4.2.1 break", "text": "<p>break\u53ea\u80fd\u7528\u5728\u5faa\u73af\u4f53\u548cswitch\u8bed\u53e5\u4e2d\u3002</p> <p>break\u8df3\u51fa\u672c\u5c42\u5faa\u73af\u3002</p>"}, {"location": "yuyan/C/%E5%BE%AA%E7%8E%AF/#422-continue", "title": "4.2.2 continue", "text": "<p>continue\u53ea\u662f\u8df3\u51fa\u672c\u6b21\u5faa\u73af\u3002</p>"}, {"location": "yuyan/C/%E5%BE%AA%E7%8E%AF/#423-goto", "title": "4.2.3 goto", "text": "<p>\"goto\" \u662f\u4e00\u79cd\u63a7\u5236\u6d41\u8bed\u53e5\uff0c\u5141\u8bb8\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u65e0\u6761\u4ef6\u5730\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u3002\u7136\u800c\uff0c\u5927\u591a\u6570\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u4e0d\u63a8\u8350\u6216\u4e0d\u652f\u6301\u4f7f\u7528 \"goto\"\uff0c\u56e0\u4e3a\u5b83\u5bb9\u6613\u5bfc\u81f4\u4ee3\u7801\u96be\u4ee5\u7406\u89e3\u548c\u7ef4\u62a4\u3002\u76f8\u53cd\uff0c\u63a8\u8350\u4f7f\u7528\u7ed3\u6784\u5316\u7684\u63a7\u5236\u6d41\u8bed\u53e5\uff0c\u5982\u6761\u4ef6\u8bed\u53e5\uff08if-else\uff09\u3001\u5faa\u73af\u8bed\u53e5\uff08for\u3001while\uff09\u3001\u51fd\u6570\u548c\u5f02\u5e38\u5904\u7406\u7b49\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528 \"goto\" \u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u4f7f\u7528C\u8bed\u8a00\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 0;\n\n    // \u4f7f\u7528goto\u8bed\u53e5\n    loop_start:\n        if (i &lt; 5) {\n            printf(\"%d \", i);\n            i++;\n            goto loop_start;\n        }\n\n    return 0;\n}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7a0b\u5e8f\u901a\u8fc7 <code>goto loop_start;</code> \u8bed\u53e5\u65e0\u6761\u4ef6\u5730\u8df3\u8f6c\u5230\u6807\u7b7e <code>loop_start:</code> \u5904\uff0c\u4ece\u800c\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u3002\u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0c\u8fd9\u6837\u7684\u5199\u6cd5\u5bb9\u6613\u5bfc\u81f4\u4ee3\u7801\u6df7\u4e71\uff0c\u5e76\u4e14\u4e0d\u6613\u7ef4\u62a4\u3002</p> <p>\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u63a7\u5236\u6d41\u7ed3\u6784\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u6613\u8bfb\u61c2\u548c\u7ef4\u62a4\u3002\u5982\u679c\u4f60\u9047\u5230\u9700\u8981\u4f7f\u7528 \"goto\" \u7684\u60c5\u51b5\uff0c\u5efa\u8bae\u8003\u8651\u91cd\u6784\u4ee3\u7801\u4ee5\u4f7f\u7528\u66f4\u5408\u9002\u7684\u63a7\u5236\u7ed3\u6784\u3002</p>"}, {"location": "yuyan/C/%E6%8C%87%E9%92%88/", "title": "8 \u6307\u9488", "text": "<p>\u592a\u96be\u4e86\uff0c\u6211\u4e0d\u4f1a\uff08bushi</p>"}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/", "title": "2.1 \u5e38\u91cf\u4e0e\u53d8\u91cf", "text": ""}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#211", "title": "2.1.1", "text": "<ul> <li>\u6d6e\u70b9\u5e38\u6570\u540e\u7f00\uff1af\u6216F\uff08\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff09\u3001l\u6216L\uff08\u957f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff09      \u6d6e\u70b9\u578b\u5e38\u6570\u603b\u662f\u6709\u7b26\u53f7\u7684\uff0c\u6545\u6ca1\u6709u\u548cU</li> <li>\u6574\u578b\u5e38\u6570\u540e\u7f00\uff1al\u6216L\uff0cu\u6216U\uff0cL\u548cU\u7684\u7ec4\u5408</li> </ul>"}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#212", "title": "2.1.2 \u5b57\u7b26\u578b\u5e38\u91cf", "text": "<ul> <li>\u666e\u901a\u5b57\u7b26</li> <li>\u8f6c\u4e49\u5b57\u7b26</li> </ul> \u8f6c\u4e49\u5b57\u7b26 \u542b\u4e49 \\o NULL \\n \u6362\u884c \\r \u56de\u8f66 \\t \u5236\u8868 \\a \u54cd\u94c3 \\b \u9000\u683c \\f \u6362\u9875 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\\\ \u53cd\u659c\u6760 \\ddd \u4e09\u4f4d8\u8fdb\u5236 \\xhh \u4e8c\u4f4d16\u8fdb\u5236 <p>ddd\u548chh\u5206\u522b\u4e3a8\u8fdb\u5236\u548c16\u8fdb\u5236\u7684ASCII\u7801</p> <p>C\u8bed\u8a00\u5141\u8bb8\u5bf9\u6574\u578b\u53d8\u91cf\u8d4b\u4e88\u5b57\u7b26\u503c\uff0c\u4e5f\u5141\u8bb8\u5bf9\u5b57\u7b26\u53d8\u91cf\u8d4b\u4e88\u6574\u578b\u503c</p> <p>\u8868\u793a\u5341\u8fdb\u5236\u6570 -3 \u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4f7f\u75288\u4f4d\u7684\u8865\u7801\u8868\u793a\u3002\u9996\u5148\uff0c\u627e\u52303\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff0c\u7136\u540e\u53d6\u53cd\uff0c\u5e76\u5728\u7ed3\u679c\u4e0a\u52a01\u30023 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f <code>0000 0011</code>\u3002\u53d6\u53cd\u5f97\u5230 <code>1111 1100</code>\uff0c\u7136\u540e\u52a01\u5f97\u5230\u8865\u7801\u5f62\u5f0f\uff1a</p> \\[1111 \\ 1100 + 1 = 1111 \\ 1101\\] <p>\u56e0\u6b64\uff0c-3 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f <code>1111 1101</code>\u3002</p> \u7c7b\u578b \u5185\u5b58 \u8303\u56f4 short int 2 -32768~32767 unsign short 2 0~65535 int 4 -......~...... long int 4 -......~......"}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#22", "title": "2.2 \u8fd0\u7b97\u7b26\u53ca\u8868\u8fbe\u5f0f", "text": "<p>\u8fd0\u7b97\u7b26\u53ca\u4f18\u5148\u7ea7</p> <p>\u5728C\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u6574\u578b\uff0c\u800c\u53e6\u4e00\u4e2a\u662f\u6d6e\u70b9\u578b\uff0c\u901a\u5e38\u4f1a\u53d1\u751f\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u6574\u578b\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\uff0c\u7136\u540e\u6267\u884c\u6d6e\u70b9\u6570\u9664\u6cd5\u3002\u8fd9\u662f\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u8868\u793a\u8303\u56f4\u66f4\u5e7f\uff0c\u80fd\u591f\u5bb9\u7eb3\u6574\u6570\u548c\u5c0f\u6570\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int numerator = 7;\n    double denominator = 3.0;\n\n    double result = numerator / denominator;  // \u6574\u578b\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\uff0c\u6267\u884c\u6d6e\u70b9\u6570\u9664\u6cd5\n    printf(\"%f\\n\", result);  // \u8f93\u51fa 2.333333\n\n    return 0;\n}\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c<code>numerator</code>\u662f\u6574\u578b\uff0c<code>denominator</code>\u662f\u6d6e\u70b9\u578b\uff0c\u7136\u540e\u5b83\u4eec\u76f8\u9664\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u3002\u5728\u8fdb\u884c\u9664\u6cd5\u8fd0\u7b97\u65f6\uff0c\u6574\u578b\u7684\u64cd\u4f5c\u6570\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\uff0c\u4ee5\u4fdd\u7559\u5c0f\u6570\u90e8\u5206\u3002</p> <p>\u5982\u679c\u4f60\u60f3\u660e\u786e\u6307\u5b9a\u6574\u6570\u9664\u6cd5\uff0c\u53ef\u4ee5\u5c06\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u6570\u5f3a\u5236\u8f6c\u6362\u4e3a\u6574\u578b\u3002\u4f8b\u5982\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int numerator = 7;\n    double denominator = 3.0;\n\n    double result = (double)numerator / denominator;  // \u5f3a\u5236\u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u6d6e\u70b9\u578b\uff0c\u6267\u884c\u6d6e\u70b9\u6570\u9664\u6cd5\n    printf(\"%f\\n\", result);  // \u8f93\u51fa 2.333333\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528<code>(double)</code>\u5c06<code>numerator</code>\u5f3a\u5236\u8f6c\u6362\u4e3a<code>double</code>\u7c7b\u578b\uff0c\u786e\u4fdd\u4e86\u6267\u884c\u7684\u662f\u6d6e\u70b9\u6570\u9664\u6cd5\u3002</p> <p>\u91cd\u70b9\uff1ai++\u548c++i \u5728C\u8bed\u8a00\u4e2d\uff0c<code>i++</code> \u548c <code>++i</code> \u90fd\u662f\u7528\u6765\u9012\u589e\u53d8\u91cf <code>i</code> \u7684\u64cd\u4f5c\u7b26\uff0c\u4f46\u5b83\u4eec\u6709\u4e00\u4e9b\u5173\u952e\u7684\u533a\u522b\u3002</p> <ol> <li> <p><code>i++</code>\uff08\u540e\u7f00\u9012\u589e\uff09\uff1a \u8fd9\u4e2a\u64cd\u4f5c\u7b26\u4f1a\u5148\u8fd4\u56de <code>i</code> \u7684\u5f53\u524d\u503c\uff0c\u7136\u540e\u518d\u5c06 <code>i</code> \u7684\u503c\u52a0 1\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5199 <code>y = i++</code>\uff0c<code>y</code> \u5c06\u4f1a\u5f97\u5230 <code>i</code> \u7684\u5f53\u524d\u503c\uff0c\u7136\u540e <code>i</code> \u7684\u503c\u4f1a\u9012\u589e\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 5;\n    int y = i++;\n\n    printf(\"i: %d\\n\", i);  // \u8f93\u51fa\uff1a6\n    printf(\"y: %d\\n\", y);  // \u8f93\u51fa\uff1a5\n\n    return 0;\n}\n</code></pre> </li> <li> <p><code>++i</code>\uff08\u524d\u7f00\u9012\u589e\uff09\uff1a \u8fd9\u4e2a\u64cd\u4f5c\u7b26\u4f1a\u5148\u5c06 <code>i</code> \u7684\u503c\u52a0 1\uff0c\u7136\u540e\u518d\u8fd4\u56de <code>i</code> \u7684\u65b0\u503c\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5199 <code>y = ++i</code>\uff0c<code>y</code> \u5c06\u4f1a\u5f97\u5230 <code>i</code> \u7684\u9012\u589e\u540e\u7684\u65b0\u503c\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 5;\n    int y = ++i;\n\n    printf(\"i: %d\\n\", i);  // \u8f93\u51fa\uff1a6\n    printf(\"y: %d\\n\", y);  // \u8f93\u51fa\uff1a6\n\n    return 0;\n}\n</code></pre> </li> </ol> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u7684\u6548\u679c\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u573a\u666f\u4e2d\uff0c\u9009\u62e9\u4f7f\u7528\u5176\u4e2d\u4e4b\u4e00\u53ef\u80fd\u66f4\u5408\u9002\u3002\u4f8b\u5982\uff0c\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c<code>++i</code> \u7684\u6548\u7387\u53ef\u80fd\u6bd4 <code>i++</code> \u9ad8\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u4fdd\u5b58 <code>i</code> \u7684\u5f53\u524d\u503c\u3002</p> <p>\u5728\u66f4\u590d\u6742\u7684\u60c5\u51b5\u4e0b\uff0c\u4e86\u89e3\u9012\u589e\u64cd\u4f5c\u7b26\u7684\u524d\u7f00\u548c\u540e\u7f00\u5f62\u5f0f\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5f88\u91cd\u8981\u7684\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u80fd\u66f4\u5177\u6311\u6218\u6027\u7684\u793a\u4f8b\uff0c\u4ee5\u5e2e\u52a9\u8bf4\u660e\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u533a\u522b\uff1a</p> <ol> <li> <p>\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i = 5;\n    int x = 2 * i++;  // \u540e\u7f00\u9012\u589e\n\n    printf(\"i: %d\\n\", i);  // \u8f93\u51fa\uff1a6\n    printf(\"x: %d\\n\", x);  // \u8f93\u51fa\uff1a10\n\n    return 0;\n}\n</code></pre> <p>\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c<code>x = 2 * i++</code> \u8868\u793a\u5148\u4f7f\u7528 <code>i</code> \u7684\u5f53\u524d\u503c\u8ba1\u7b97 <code>2 * i</code>\uff0c\u7136\u540e\u518d\u9012\u589e <code>i</code> \u7684\u503c\u3002</p> </li> <li> <p>\u5faa\u73af\u4e2d\u7684\u4f7f\u7528\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int i;\n\n    printf(\"Postfix increment:\\n\");\n    for (i = 0; i &lt; 5; i++) {\n        printf(\"%d \", i);\n    }\n    printf(\"\\n\");\n\n    printf(\"Prefix increment:\\n\");\n    for (i = 0; i &lt; 5; ++i) {\n        printf(\"%d \", i);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n</code></pre> <p>\u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u65f6\uff0c<code>i++</code> \u548c <code>++i</code> \u5728\u6548\u679c\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u90fd\u4f1a\u9012\u589e <code>i</code> \u7684\u503c\uff0c\u4f46\u524d\u7f00\u9012\u589e\u53ef\u80fd\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u66f4\u53d7\u6b22\u8fce\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u7ef4\u62a4 <code>i</code> \u7684\u5f53\u524d\u503c\u3002</p> </li> </ol> <p>\u9017\u53f7\u8fd0\u7b97\u7b26 \u4ece\u5de6\u5230\u53f3\u6267\u884c\uff0c\u6700\u540e\u8fd4\u56de\u6700\u540e\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#23", "title": "2.3 \u4f4d\u8fd0\u7b97", "text": "\u64cd\u4f5c \u7b26\u53f7 \u89e3\u91ca \u793a\u4f8b \u4e0e\u8fd0\u7b97 &amp; \u5bf9\u5e94\u4f4d\u4e0a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u7684\u76f8\u5e94\u4f4d\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002 1010 &amp; 1100 = 1000 \u6216\u8fd0\u7b97 | \u5bf9\u5e94\u4f4d\u4e0a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u6709\u4e00\u4e2a\u4e3a1\u65f6\uff0c\u7ed3\u679c\u7684\u76f8\u5e94\u4f4d\u4e3a1\u3002 1010 | 1100 = 1110 \u5f02\u6216\u8fd0\u7b97 ^ \u5bf9\u5e94\u4f4d\u4e0a\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e0d\u540c\u65f6\uff0c\u7ed3\u679c\u7684\u76f8\u5e94\u4f4d\u4e3a1\uff0c\u76f8\u540c\u65f6\u4e3a0\u3002 1010 ^ 1100 = 0110 \u53d6\u53cd\u8fd0\u7b97 ~ \u5c06\u6bcf\u4e2a\u4f4d\u4e0a\u76840\u53d8\u4e3a1\uff0c1\u53d8\u4e3a0\u3002 ~1010 = 0101 \u5de6\u79fb\u8fd0\u7b97 &lt;&lt; \u5c06\u4e8c\u8fdb\u5236\u6570\u7684\u6240\u6709\u4f4d\u5411\u5de6\u79fb\u52a8n\u4f4d\uff0c\u53f3\u4fa7\u75280\u586b\u5145\u3002 1010 &lt;&lt; 2 = 00101000 \u53f3\u79fb\u8fd0\u7b97 &gt;&gt; \u5c06\u4e8c\u8fdb\u5236\u6570\u7684\u6240\u6709\u4f4d\u5411\u53f3\u79fb\u52a8n\u4f4d\uff0c\u5de6\u4fa7\u7528\u7b26\u53f7\u4f4d\u62160\u586b\u5145\u3002 1010 &gt;&gt; 2 = 00001010 <p>&lt;&lt; \u5411\u5de6n\u4f4d\uff0c\u5219\u4e582^n\u3002</p> <p>\u82e5\u77e5\u9053\u8d1f\u6570\u7684\u8865\u7801\uff0c\u5219\u9664\u7b26\u53f7\u4f4d\u53d6\u53cd\u52a0\u4e00\uff08\u518d\u52a0\u8d1f\u53f7\uff09\u3002</p> <p>\u5b83\u7528\u4e8e\u5c06\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7684\u5404\u4f4d\u5411\u53f3\u79fb\u52a8\u6307\u5b9a\u7684\u4f4d\u6570\u3002\u53f3\u79fb\u8fd0\u7b97\u4f1a\u7528\u7b26\u53f7\u4f4d\u586b\u5145\u5de6\u4fa7\u7684\u7a7a\u4f4d\uff08\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u6570\uff09\uff0c\u6216\u8005\u75280\u586b\u5145\uff08\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\uff09\u3002</p> <p>![[Pasted image 20231226220150.jpg]]</p>"}, {"location": "yuyan/C/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_1", "title": "\u505a\u9898\u603b\u7ed3", "text": "<p>%\u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c\u5bf9\u8c61\u4e3a\u6574\u6570\uff0c\u8d4b\u503c\u8fd0\u7b97\u5de6\u8fb9\u662f\u53d8\u91cf\uff0c\u53f3\u8fb9\u4e3a\u8868\u8fbe\u5f0f</p> <p>\u5b8f\u5b9a\u4e49\u4e2d\u4e3a\u5e38\u91cf\uff0c\u4e0d\u80fd\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c C<pre><code>#define d 2\nd++; //\u9519\u8bef\u7684\n</code></pre></p> <p>\u5173\u4e8ee\u7684\u591a\u5c11\u6b21\u65b9\uff0c\u9636\u6570\u5fc5\u987b\u4e3a\u4e00\u5230\u4e09\u4f4d\u65e0\u7b26\u53f7\u5e38\u91cf\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e14e/E\u524d\u9762\u7684\u90e8\u5206\u4e0d\u53ef\u5b8c\u5168\u7701\u53bb\u3002</p> <p>y=double(i)\u662f\u9519\u8bef\u7684 y=(double)i\u662f\u6b63\u786e\u7684</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/", "title": "5.1 \u6392\u5e8f", "text": ""}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#511", "title": "5.1.1 \u9009\u62e9\u6392\u5e8f", "text": "<p>\u5f53\u6211\u4eec\u8c08\u8bba\u9009\u62e9\u6392\u5e8f\uff08Selection Sort\uff09\u65f6\uff0c\u8fd9\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5728\u672a\u6392\u5e8f\u7684\u90e8\u5206\u4e2d\u9009\u62e9\u6700\u5c0f\uff08\u6216\u6700\u5927\uff09\u7684\u5143\u7d20\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u672a\u6392\u5e8f\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u6574\u4e2a\u6570\u7ec4\u6392\u5e8f\u5b8c\u6210\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u9009\u62e9\u6392\u5e8f\u7684\u7b80\u5355\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// \u9009\u62e9\u6392\u5e8f\u51fd\u6570\nvoid selectionSort(int arr[], int n) {\n    int i, j, minIndex, temp;\n\n    for (i = 0; i &lt; n - 1; i++) {\n        // \u5047\u8bbe\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684\n        minIndex = i;\n\n        // \u5728\u672a\u6392\u5e8f\u7684\u90e8\u5206\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\u7684\u7d22\u5f15\n        for (j = i + 1; j &lt; n; j++) {\n            if (arr[j] &lt; arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n\n        // \u5c06\u6700\u5c0f\u7684\u5143\u7d20\u4e0e\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u4ea4\u6362\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n}\n\n// \u6253\u5370\u6570\u7ec4\u5143\u7d20\u7684\u51fd\u6570\nvoid printArray(int arr[], int size) {\n    int i;\n    for (i = 0; i &lt; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"\u539f\u59cb\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    // \u5e94\u7528\u9009\u62e9\u6392\u5e8f\n    selectionSort(arr, n);\n\n    printf(\"\u6392\u5e8f\u540e\u7684\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>selectionSort</code> \u51fd\u6570\u5b9e\u73b0\u4e86\u9009\u62e9\u6392\u5e8f\u7b97\u6cd5\uff0c\u800c <code>printArray</code> \u51fd\u6570\u7528\u4e8e\u6253\u5370\u6570\u7ec4\u5143\u7d20\u3002\u5728 <code>main</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u5176\u8fdb\u884c\u9009\u62e9\u6392\u5e8f\uff0c\u5e76\u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u9009\u62e9\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5927\u578b\u6570\u636e\u96c6\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u9009\u62e9\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#512", "title": "5.1.2 \u5192\u6ce1\u6392\u5e8f", "text": "<p>\u5192\u6ce1\u6392\u5e8f\uff08Bubble Sort\uff09\u662f\u53e6\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u591a\u6b21\u904d\u5386\u6570\u7ec4\uff0c\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5b83\u4eec\u7684\u987a\u5e8f\u4e0d\u6b63\u786e\u5c31\u4ea4\u6362\u5b83\u4eec\uff0c\u76f4\u5230\u6574\u4e2a\u6570\u7ec4\u6392\u5e8f\u5b8c\u6210\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\u7684\u7b80\u5355\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// \u5192\u6ce1\u6392\u5e8f\u51fd\u6570\nvoid bubbleSort(int arr[], int n) {\n    int i, j, temp;\n    for (i = 0; i &lt; n-1; i++) {\n        for (j = 0; j &lt; n-i-1; j++) {\n            // \u5982\u679c\u76f8\u90bb\u5143\u7d20\u7684\u987a\u5e8f\u4e0d\u6b63\u786e\uff0c\u4ea4\u6362\u5b83\u4eec\n            if (arr[j] &gt; arr[j+1]) {\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\n// \u6253\u5370\u6570\u7ec4\u5143\u7d20\u7684\u51fd\u6570\nvoid printArray(int arr[], int size) {\n    int i;\n    for (i = 0; i &lt; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"\u539f\u59cb\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    // \u5e94\u7528\u5192\u6ce1\u6392\u5e8f\n    bubbleSort(arr, n);\n\n    printf(\"\u6392\u5e8f\u540e\u7684\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>bubbleSort</code> \u51fd\u6570\u5b9e\u73b0\u4e86\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\uff0c\u800c <code>printArray</code> \u51fd\u6570\u7528\u4e8e\u6253\u5370\u6570\u7ec4\u5143\u7d20\u3002\u5728 <code>main</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u5176\u8fdb\u884c\u5192\u6ce1\u6392\u5e8f\uff0c\u5e76\u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e3aO(n^2)\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5927\u578b\u6570\u636e\u96c6\u540c\u6837\u4e0d\u662f\u6700\u4f18\u9009\u62e9\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5176\u7b80\u5355\u6027\uff0c\u5192\u6ce1\u6392\u5e8f\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u4e0b\u53ef\u80fd\u662f\u6709\u7528\u7684\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#513", "title": "5.1.3 \u5e0c\u5c14\u6392\u5e8f", "text": "<p>\u5e0c\u5c14\u6392\u5e8f\uff08Shell Sort\uff09\u662f\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u79cd\u6539\u8fdb\u7248\u672c\uff0c\u4e5f\u79f0\u4e3a\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\u3002\u5b83\u901a\u8fc7\u5c06\u6574\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u5b50\u5e8f\u5217\u5206\u522b\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\uff0c\u6700\u7ec8\u5408\u5e76\u8fd9\u4e9b\u5b50\u5e8f\u5217\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u5e0c\u5c14\u6392\u5e8f\u7684\u7b80\u5355\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// \u5e0c\u5c14\u6392\u5e8f\u51fd\u6570\nvoid shellSort(int arr[], int n) {\n    int i, j, temp;\n    // \u9009\u62e9\u589e\u91cf\u5e8f\u5217\uff0c\u8fd9\u91cc\u4f7f\u7528\u5e0c\u5c14\u5efa\u8bae\u7684\u5e8f\u5217\n    for (int gap = n/2; gap &gt; 0; gap /= 2) {\n        for (i = gap; i &lt; n; i++) {\n            temp = arr[i];\n            // \u5bf9\u5b50\u5e8f\u5217\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\n            for (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) {\n                arr[j] = arr[j - gap];\n            }\n            arr[j] = temp;\n        }\n    }\n}\n\n// \u6253\u5370\u6570\u7ec4\u5143\u7d20\u7684\u51fd\u6570\nvoid printArray(int arr[], int size) {\n    int i;\n    for (i = 0; i &lt; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"\u539f\u59cb\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    // \u5e94\u7528\u5e0c\u5c14\u6392\u5e8f\n    shellSort(arr, n);\n\n    printf(\"\u6392\u5e8f\u540e\u7684\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>shellSort</code> \u51fd\u6570\u5b9e\u73b0\u4e86\u5e0c\u5c14\u6392\u5e8f\u7b97\u6cd5\uff0c\u800c <code>printArray</code> \u51fd\u6570\u7528\u4e8e\u6253\u5370\u6570\u7ec4\u5143\u7d20\u3002\u5728 <code>main</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u5176\u8fdb\u884c\u5e0c\u5c14\u6392\u5e8f\uff0c\u5e76\u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6240\u9009\u62e9\u7684\u589e\u91cf\u5e8f\u5217\uff0c\u4f46\u901a\u5e38\u5b83\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\u7684\u6027\u80fd\u8981\u4f18\u4e8e\u63d2\u5165\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\u3002\u5e0c\u5c14\u6392\u5e8f\u662f\u4e00\u79cd\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#514", "title": "5.1.4 \u5feb\u901f\u6392\u5e8f", "text": "<p>\u5feb\u901f\u6392\u5e8f\uff08Quick Sort\uff09\u662f\u4e00\u79cd\u5206\u6cbb\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u9009\u62e9\u4e00\u4e2a\u57fa\u51c6\u5143\u7d20\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u9012\u5f52\u5730\u5bf9\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u5feb\u901f\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\u5728\u6570\u7ec4\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\uff0c\u5c06\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u79fb\u52a8\u5230\u57fa\u51c6\u7684\u5de6\u8fb9\uff0c\u5c06\u5927\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u79fb\u52a8\u5230\u57fa\u51c6\u7684\u53f3\u8fb9\uff0c\u7136\u540e\u5bf9\u5de6\u53f3\u4e24\u4e2a\u5b50\u6570\u7ec4\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u4ee5\u4e0b\u662f\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\u7684\u7b80\u5355\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// \u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\u7684\u51fd\u6570\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// \u5c06\u6570\u7ec4\u5206\u533a\uff0c\u5e76\u8fd4\u56de\u57fa\u51c6\u5143\u7d20\u7684\u7d22\u5f15\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high]; // \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\n    int i = (low - 1); // \u521d\u59cb\u5316\u8f83\u5c0f\u5143\u7d20\u7684\u7d22\u5f15\n\n    for (int j = low; j &lt;= high - 1; j++) {\n        // \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u51c6\n        if (arr[j] &lt;= pivot) {\n            i++;\n            // \u4ea4\u6362arr[i]\u548carr[j]\n            swap(&amp;arr[i], &amp;arr[j]);\n        }\n    }\n    // \u4ea4\u6362arr[i+1]\u548carr[high]\uff0c\u5c06\u57fa\u51c6\u5143\u7d20\u653e\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\n    swap(&amp;arr[i + 1], &amp;arr[high]);\n    return (i + 1);\n}\n\n// \u5feb\u901f\u6392\u5e8f\u51fd\u6570\nvoid quickSort(int arr[], int low, int high) {\n    if (low &lt; high) {\n        // \u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u533a\uff0c\u5e76\u83b7\u53d6\u57fa\u51c6\u5143\u7d20\u7684\u7d22\u5f15\n        int pi = partition(arr, low, high);\n\n        // \u5206\u522b\u5bf9\u5de6\u53f3\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\n// \u6253\u5370\u6570\u7ec4\u5143\u7d20\u7684\u51fd\u6570\nvoid printArray(int arr[], int size) {\n    int i;\n    for (i = 0; i &lt; size; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"\u539f\u59cb\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    // \u5e94\u7528\u5feb\u901f\u6392\u5e8f\n    quickSort(arr, 0, n - 1);\n\n    printf(\"\u6392\u5e8f\u540e\u7684\u6570\u7ec4: \\n\");\n    printArray(arr, n);\n\n    return 0;\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>quickSort</code> \u51fd\u6570\u5b9e\u73b0\u4e86\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\uff0c\u800c <code>partition</code> \u51fd\u6570\u7528\u4e8e\u5728\u6570\u7ec4\u4e2d\u9009\u62e9\u57fa\u51c6\u5143\u7d20\u5e76\u5c06\u6570\u7ec4\u5206\u533a\u3002\u5728 <code>main</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u5bf9\u5176\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\uff0c\u5e76\u8f93\u51fa\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n log n)\uff0c\u5b83\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#52", "title": "5.2 \u4e8c\u7ef4\u6570\u7ec4", "text": "<ul> <li>\u5728\u521d\u59cb\u5316\u4e8c\u7ef4\u6570\u7ec4\u65f6\u53ef\u7701\u7565\u7b2c\u4e00\u7ef4\u5927\u5c0f\uff0c\u4f46\u662f\u4e0d\u80fd\u7701\u7565\u7b2c\u4e8c\u7ef4\u5927\u5c0f\u3002</li> </ul>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#53", "title": "5.3 \u5b57\u7b26\u6570\u7ec4", "text": "<ul> <li>char str[6] = {\"Hello\"} ;</li> </ul> <p>\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u5927\u62ec\u53f7\u53ef\u4ee5\u7701\u7565\u3002</p> <p>![[Pasted image 20231229193611.png]] \u672c\u8d28\uff1a\u6570\u7ec4\u7b49\u4e8e\u6570\u7ec4</p> C<pre><code>char a[10];\nscanf(\"%c\",&amp;a[i]);\nscanf(\"%s\",a);\n</code></pre> <p>scanf\u9047\u5230\u5236\u8868\u7b26\u3001\u7a7a\u683c\u3001\u6362\u884c\u7b26\u3001EOF\u505c\u6b62\u8bfb\u5165\u3002 gets\u548cputs\u9047\u5230\u6362\u884c\u7b26\u3001EOF\u505c\u6b62\u3002</p>"}, {"location": "yuyan/C/%E6%95%B0%E7%BB%84/#_1", "title": "\u672c\u7ae0\u603b\u7ed3", "text": "<p>C<pre><code>char sp[] = \"\\t\\b\\0123\\n\"\nprintf(\"%d\",strlen(sp));\n</code></pre> \u7b54\u6848\u662f5\u3002 \\t \\b \\012 3 \\n</p>"}, {"location": "yuyan/C/%E6%96%87%E4%BB%B6/", "title": "10.1 \u6587\u4ef6\u7684\u57fa\u7840\u77e5\u8bc6", "text": "<code>mode</code> Access <code>\"r\"</code> \u6253\u5f00\u4ee5\u4fbf\u8bfb\u53d6\u3002 \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u627e\u4e0d\u5230\uff0c<code>fopen</code>\u00a0\u8c03\u7528\u5c06\u5931\u8d25\u3002 <code>\"w\"</code> \u6253\u5f00\u7528\u4e8e\u5199\u5165\u7684\u7a7a\u6587\u4ef6\u3002 \u5982\u679c\u7ed9\u5b9a\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u5176\u5185\u5bb9\u4f1a\u88ab\u9500\u6bc1\u3002 <code>\"a\"</code> \u5728\u6587\u4ef6\u672b\u5c3e\u6253\u5f00\u4ee5\u8fdb\u884c\u5199\u5165\uff08\u8ffd\u52a0\uff09\uff0c\u5728\u65b0\u6570\u636e\u5199\u5165\u5230\u6587\u4ef6\u4e4b\u524d\u4e0d\u79fb\u9664\u6587\u4ef6\u672b\u5c3e (EOF) \u6807\u8bb0\u3002 \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6587\u4ef6\u3002 <code>\"r+\"</code> \u6253\u5f00\u4ee5\u4fbf\u8bfb\u53d6\u548c\u5199\u5165\u3002 \u6587\u4ef6\u5fc5\u987b\u5b58\u5728\u3002 <code>\"w+\"</code> \u6253\u5f00\u7528\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u7684\u7a7a\u6587\u4ef6\u3002 \u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u5176\u5185\u5bb9\u4f1a\u88ab\u9500\u6bc1\u3002 <code>\"a+\"</code> \u6253\u5f00\u4ee5\u8fdb\u884c\u8bfb\u53d6\u548c\u8ffd\u52a0\u3002 \u8ffd\u52a0\u64cd\u4f5c\u5305\u62ec\u5728\u65b0\u6570\u636e\u5199\u5165\u6587\u4ef6\u4e4b\u524d\u79fb\u9664 EOF \u6807\u8bb0\u3002 \u5199\u5165\u5b8c\u6210\u540e\uff0cEOF \u6807\u8bb0\u4e0d\u4f1a\u8fd8\u539f\u3002 \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u6587\u4ef6\u3002"}, {"location": "yuyan/C/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/", "title": "3.1 if", "text": "<p>\u82e5\u4e0d\u5e0c\u671belse\u4e0e\u6700\u8fd1\u7684if\u8bed\u53e5\u914d\u5bf9\uff0c\u53ef\u4ee5\u7528\u5927\u62ec\u53f7{ }\u5c06\u8be5if\u8bed\u53e5\u62ec\u8d77\u6765</p>"}, {"location": "yuyan/C/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/#32-switch-case", "title": "3.2 Switch Case", "text": "<p><code>switch</code>\u8bed\u53e5\u662f\u4e00\u79cd\u5728\u591a\u4e2a\u53ef\u80fd\u60c5\u51b5\u4e0b\u9009\u62e9\u6267\u884c\u7684\u63a7\u5236\u6d41\u8bed\u53e5\u3002\u5b83\u901a\u5e38\u4e0e<code>case</code>\u8bed\u53e5\u4e00\u8d77\u4f7f\u7528\u3002</p>"}, {"location": "yuyan/C/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/#_1", "title": "\u8bed\u6cd5", "text": "C<pre><code>switch (\u8868\u8fbe\u5f0f) {\n  case \u503c1:\n    // \u4ee3\u7801\u57571\n    break;\n  case \u503c2:\n    // \u4ee3\u7801\u57572\n    break;\n  // \u53ef\u4ee5\u6709\u591a\u4e2acase\n  default:\n    // \u5982\u679c\u4e0a\u9762\u7684case\u90fd\u4e0d\u5339\u914d\u65f6\u6267\u884c\u7684\u4ee3\u7801\u5757\n}\n</code></pre> <ul> <li>\u4e00\u5b9a\u8981\u6ce8\u610f\u6709\u6ca1\u6709break</li> <li>\u82e5switch\u4e2d\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u4e0d\u662f\u6574\u6570\u5219\u81ea\u52a8\u53d6\u6574</li> <li>case\u548cdefault\u540e\u7684\u8bed\u53e5\u53ef\u4ee5\u662f\u590d\u5408\u8bed\u53e5\uff0c\u4e14\u4e0d\u7528\u52a0{ }</li> <li>\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u8bed\u53e5\u53ef\u4ee5\u7701\u7565\uff0c\u591a\u4e2acase\u5171\u7528\u4e00\u7ec4\u6267\u884c\u8bed\u53e5</li> <li>default\u53ef\u4ee5\u7f6e\u4e8ecase\u4e4b\u95f4\uff0cdefault\u540ecase\u4e2d\u7684\u8bed\u53e5\u4f1a\u7ee7\u7eed\u6267\u884c C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int i;\n\u00a0 \u00a0 scanf(\"%d\",&amp;i);\n\u00a0 \u00a0 switch(i)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 case 1:\n\u00a0 \u00a0 \u00a0 \u00a0 printf(\"1\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 default:\n\u00a0 \u00a0 \u00a0 \u00a0 printf(\"2\");\n\u00a0 \u00a0 \u00a0 \u00a0 case 2:\n\u00a0 \u00a0 \u00a0 \u00a0 printf(\"3\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 \u00a0 \u00a0 case 3:\n\u00a0 \u00a0 \u00a0 \u00a0 printf(\"4\");\n\u00a0 \u00a0 \u00a0 \u00a0 break;\n\u00a0 \u00a0 }\n}\n</code></pre></li> <li>switch\u65e0\u4f18\u5148\u7ea7\uff0cif\u6709\u4f18\u5148\u7ea7</li> </ul>"}, {"location": "yuyan/C/%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/#_2", "title": "\u505a\u9898\u603b\u7ed3", "text": "<p>C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int x = 5;\n\u00a0 \u00a0 if(x++&gt;5)\n\u00a0 \u00a0 printf(\"%d\",x);\n\u00a0 \u00a0 else\n\u00a0 \u00a0 printf(\"%d\",x--);\n\u00a0 \u00a0 printf(\"%d\",x);\n}\n</code></pre> \u6ce8\u610f\uff1a\u6781\u5176\u91cd\u8981\uff01\uff01\u5728if(x++&gt;5)\u4e2d\uff0cx\u5df2\u7ecf\u52a0\u4e861\u4e86\uff01\u5728\u540e\u7eedprintf\u4e2d\u7684x--\u4e2d\uff0c\u5148\u8f93\u51fax\uff0c\u518d\u5c06x\u7684\u503c\u51cf1\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int k=5,n=0;\n\u00a0 \u00a0 while(k&gt;0)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 switch (k)\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default:break;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 1:n+=k;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 2:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 case 3:n+=k;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 k--;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 printf(\"%d\",n);\n}\n</code></pre> <p>C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int a=1,b=2,c=3,d=0;\n\u00a0 \u00a0 if(a==1&amp;&amp;b++==2)\n\u00a0 \u00a0 \u00a0 \u00a0 if(b!=2||c--!=3)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%d,%d,%d\\n\",a,b,c);\n\u00a0 \u00a0 \u00a0 \u00a0 else if(\"%d,%d,%d\\n\",a,b,c);\n\u00a0 \u00a0 else printf(\"%d,%d,%d\\n\",a,b,c);\n\u00a0 \u00a0 //\u7b54\u6848\u662f1,3,3\n}\n</code></pre> \u8fd9\u662f\u56e0\u4e3ab!=2\u4e4b\u540e\u7684\u8bed\u53e5\u88ab||\u77ed\u8def\u4e86\u3002</p> <p>C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int a=0,b=0,c=0,d=0;\n\u00a0 \u00a0 if(a=1)b=1;c=2;\n\u00a0 \u00a0 else d=3;\n\u00a0 \u00a0 printf(\"%d %d %d %d\",a,b,c,d);\n}\n</code></pre> \u6b64\u5904\u4f1a\u7f16\u8bd1\u9519\u8bef\uff0c\u56e0\u4e3aelse\u524d\u65e0\u4e0e\u4e4b\u5bf9\u5e94\u7684if\u3002 C<pre><code>case 1:****//\u6b63\u786e\ncase 2+1:**//\u6b63\u786e\ncase c:****//\u9519\u8bef\ncase 2.0:**//\u9519\u8bef\n\nswitch(a+b)//\u6b63\u786e\nswitch(a==1)//\u6b63\u786e\n</code></pre></p> <p>C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n\u00a0 \u00a0 int a=0,b=1,c=0,d=20;\n\u00a0 \u00a0 if(a) d=d-10;\n\u00a0 \u00a0 else if(!b)\n\u00a0 \u00a0 if(!c)d=15;\n\u00a0 \u00a0 else d=25;\n\u00a0 \u00a0 printf(\"%d\",d);\n}\n</code></pre> \u6ce8\u610f\uff1a\u76f8\u5f53\u4e8eelse if(!b) \u00a0 \u00a0           { if(!c)d=15; \u00a0 \u00a0           else d=25; }</p> C<pre><code>if(a&gt;b&gt;c)\n\u76f8\u5f53\u4e8e\nif((a&gt;b)&gt;c)\n</code></pre>"}, {"location": "yuyan/Verilog/", "title": "Index", "text": "<p>Note</p> <p>\u8fd9\u662f\u5728\u505a\u9898\u4e2d\u603b\u7ed3\u51fa\u7684\u5c0f\u77e5\u8bc6\u70b9\u3002</p>"}, {"location": "yuyan/Verilog/1/", "title": "note1", "text": ""}, {"location": "yuyan/Verilog/1/#implicit-nets", "title": "Implicit nets", "text": "<p>Implicit nets are often a source of hard-to-detect bugs. In Verilog, net-type signals can be implicitly created by an assign statement or by attaching something undeclared to a module port. Implicit nets are always one-bit wires and causes bugs if you had intended to use a vector. Disabling creation of implicit nets can be done using the `default_nettype none directive.</p> Verilog<pre><code>wire [2:0] a, c;   // Two vectors\nassign a = 3'b101;  // a = 101\nassign b = a;       // b =   1  implicitly-created wire\nassign c = b;       // c = 001  &lt;-- bug\nmy_module i1 (d,e); // d and e are implicitly one-bit wide if not declared.\n                    // This could be a bug if the port was intended to be a vector.\n</code></pre> <p>Adding `default_nettype none would make the second line of code an error, which makes the bug more visible.</p>"}, {"location": "yuyan/Verilog/1/#unpacked-vs-packed-arrays", "title": "Unpacked vs. Packed Arrays", "text": "<p>You may have noticed that in declarations, the vector indices are written before the vector name. This declares the \"packed\" dimensions of the array, where the bits are \"packed\" together into a blob (this is relevant in a simulator, but not in hardware). The unpacked dimensions are declared after the name. They are generally used to declare memory arrays. Since ECE253 didn't cover memory arrays, we have not used packed arrays in this course. See http://www.asic-world.com/systemverilog/data_types10.html for more details.</p> Verilog<pre><code>reg [7:0] mem [255:0];   // 256 unpacked elements, each of which is a 8-bit packed vector of reg.\nreg mem2 [28:0];         // 29 unpacked elements, each of which is a 1-bit reg.\n</code></pre>"}, {"location": "yuyan/Verilog/1/#and", "title": "| and ||", "text": "<p> Verilog<pre><code>module top_module(\n    input [2:0] a, \n    input [2:0] b, \n    output [2:0] out_or_bitwise,\n    output out_or_logical,\n    output [5:0] out_not\n);\n\n    assign out_or_bitwise = a | b;\n    assign out_or_logical = a || b;\n\n    assign out_not[2:0] = ~a;   // Part-select on left side is o.\n    assign out_not[5:3] = ~b;   //Assigning to [5:3] does not conflict with [2:0]\n\nendmodule\n</code></pre></p>"}, {"location": "yuyan/Verilog/1/#the-concatenation-operator", "title": "The concatenation operator", "text": "<p>The concatenation operator allowed concatenating together vectors to form a larger vector. But sometimes you want the same thing concatenated together many times, and it is still tedious to do something like assign a = {b,b,b,b,b,b};. The replication operator allows repeating a vector and concatenating them together:</p> <p>{num{vector}} This replicates vector by num times. num must be a constant. Both sets of braces are required.</p> <p>Examples: Verilog<pre><code>{5{1'b1}}           // 5'b11111 (or 5'd31 or 5'h1f)\n{2{a,b,c}}          // The same as {a,b,c,a,b,c}\n{3'd5, {2{3'd6}}}   // 9'b101_110_110. It's a concatenation of 101 with\n                    // the second vector, which is two copies of 3'b110.\n</code></pre> One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3).</p>"}, {"location": "yuyan/Verilog/1/#module-pos-module-name", "title": "Module pos &amp; Module name", "text": ""}, {"location": "yuyan/Verilog/1/#pos", "title": "pos", "text": "<p> Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n    mod_a mod_a(out1,out2,a,b,c,d);\nendmodule\n</code></pre></p>"}, {"location": "yuyan/Verilog/1/#name", "title": "name", "text": "<p> Verilog<pre><code>module top_module ( \n    input a, \n    input b, \n    input c,\n    input d,\n    output out1,\n    output out2\n);\n    mod_a aaa (.out1(out1),.out2(out2),.in1(a),.in2(b),.in3(c),.in4(d));\nendmodule\n</code></pre></p>"}, {"location": "yuyan/Verilog/1/#full-adder", "title": "Full Adder", "text": "Verilog<pre><code>module full_adder(\n    input a,    \n    input b,    \n    input cin,  // \u8f93\u5165\u8fdb\u4f4d\n    output sum, \n    output cout // \u8f93\u51fa\u8fdb\u4f4d\n);\n    assign sum = a ^ b ^ cin;      // \u5f02\u6216\u64cd\u4f5c\u5f97\u5230\u548c\n    assign cout = (a &amp; b) | (cin &amp; (a ^ b)); // \u4e0e\u6216\u64cd\u4f5c\u5f97\u5230\u8fdb\u4f4d\nendmodule\n</code></pre> <p>Note</p> <p>sum = a ^ b ^ cin      cout = a &amp; b | a &amp; cin | b &amp; cin = (a &amp; b) | (cin &amp; (a ^ b))</p>"}, {"location": "yuyan/Verilog/1/#substractor", "title": "Substractor", "text": "<p>An adder-subtractor can be built from an adder by optionally negating one of the inputs, which is equivalent to inverting the input then adding 1. The net result is a circuit that can do two operations: (a + b + 0) and (a + ~b + 1). See Wikipedia if you want a more detailed explanation of how this circuit works.</p> <p>Use a 32-bit wide XOR gate to invert the b input whenever sub is 1.  Verilog<pre><code>module top_module(\n    input [31:0] a,\n    input [31:0] b,\n    input sub,\n    output [31:0] sum\n);\n    wire c1;\n    wire [31:0] b1;\n    assign b1 = b ^ {32{sub}}; //Bitwise inversion\n    add16 add1 (.a(a[15:0]),.b(b1[15:0]),.cin(sub),.sum(sum[15:0]),.cout(c1));\n    add16 add2 (.a(a[31:16]),.b(b1[31:16]),.cin(c1),.sum(sum[31:16]));\nendmodule\n</code></pre> An XOR gate can also be viewed as a programmable inverter, where one input controls whether the other should be inverted. The following two circuits are both XOR gates: </p>"}, {"location": "yuyan/Verilog/1/#wire-and-reg", "title": "wire and reg", "text": "<p>A note on wire vs. reg: The left-hand-side of an assign statement must be a net type (e.g., wire), while the left-hand-side of a procedural assignment (in an always block) must be a variable type (e.g., reg). These types (wire vs. reg) have nothing to do with what hardware is synthesized, and is just syntax left over from Verilog's use as a hardware simulation language.</p>"}, {"location": "yuyan/Verilog/1/#blocking-vs-non-blocking-assignment", "title": "Blocking vs. Non-Blocking Assignment", "text": "<p>There are three types of assignments in Verilog:</p> <ul> <li>Continuous assignments (assign x = y;). Can only be used when not inside a procedure (\"always block\").</li> <li>Procedural blocking assignment: (x = y;). Can only be used inside a procedure.</li> <li>Procedural non-blocking assignment: (x &lt;= y;). Can only be used inside a procedure.</li> </ul> <p>In a combinational always block, use blocking assignments. In a clocked always block, use non-blocking assignments. A full understanding of why is not particularly useful for hardware design and requires a good understanding of how Verilog simulators keep track of events. Not following this rule results in extremely hard to find errors that are both non-deterministic and differ between simulation and synthesized hardware.</p>"}, {"location": "yuyan/Verilog/1/#always-if", "title": "Always if", "text": "<p>An if statement usually creates a 2-to-1 multiplexer, selecting one input if the condition is true, and the other input if the condition is false. </p> <p>Verilog<pre><code>always @(*) begin\n    if (condition) begin\n        out = x;\n    end\n    else begin\n        out = y;\n    end\nend\n</code></pre> This is equivalent to using a continuous assignment with a conditional operator: Verilog<pre><code>assign out = (condition) ? x : y;\n</code></pre> However, the procedural if statement provides a new way to make mistakes. The circuit is combinational only if out is always assigned a value.</p>"}, {"location": "yuyan/Verilog/1/#how-to-avoid-making-latches", "title": "How to avoid making latches", "text": "<p>Syntactically-correct code does not necessarily result in a reasonable circuit (combinational logic + flip-flops). The usual reason is: \"What happens in the cases other than those you specified?\". Verilog's answer is: Keep the outputs unchanged.</p> <p>This behaviour of \"keep outputs unchanged\" means the current state needs to be remembered, and thus produces a latch. Combinational logic (e.g., logic gates) cannot remember any state. Watch out for Warning (10240): ... inferring latch(es)\" messages. Unless the latch was intentional, it almost always indicates a bug. Combinational circuits must have a value assigned to all outputs under all conditions. This usually means you always need else clauses or a default value assigned to the outputs.</p>"}, {"location": "yuyan/Verilog/1/#always-case", "title": "Always case", "text": "<p>Case statements in Verilog are nearly equivalent to a sequence of if-elseif-else that compares one expression to a list of others. Its syntax and functionality differs from the switch statement in C. Verilog<pre><code>always @(*) begin     // This is a combinational circuit\n    case (in)\n      1'b1: begin \n               out = 1'b1;  // begin-end if &gt;1 statement\n            end\n      1'b0: out = 1'b0;\n      default: out = 1'bx;\n    endcase\nend\n</code></pre> - The case statement begins with case and each \"case item\" ends with a colon. There is no \"switch\". - Each case item can execute exactly one statement. This makes the \"break\" used in C unnecessary. But this means that if you need more than one statement, you must use begin ... end. - Duplicate (and partially overlapping) case items are permitted. The first one that matches is used. C does not allow duplicate case items.</p>"}, {"location": "yuyan/Verilog/1/#always-casez", "title": "Always casez", "text": "Verilog<pre><code>always @(*) begin\n    casez (in[3:0])\n        4'bzzz1: out = 0;   // in[3:1] can be anything\n        4'bzz1z: out = 1;\n        4'bz1zz: out = 2;\n        4'b1zzz: out = 3;\n        default: out = 0;\n    endcase\nend\n</code></pre>"}, {"location": "yuyan/Verilog/1/#reduction", "title": "Reduction", "text": "<p>You're already familiar with bitwise operations between two values, e.g., a &amp; b or a ^ b. Sometimes, you want to create a wide gate that operates on all of the bits of one vector, like (a[0] &amp; a[1] &amp; a[2] &amp; a[3] ... ), which gets tedious if the vector is long.</p> <p>The reduction operators can do AND, OR, and XOR of the bits of a vector, producing one bit of output:</p> <p>&amp; a[3:0]     // AND: a[3]&amp;a[2]&amp;a[1]&amp;a[0]. Equivalent to (a[3:0] == 4'hf) | b[3:0]     // OR:  b[3]|b[2]|b[1]|b[0]. Equivalent to (b[3:0] != 4'h0) ^ c[2:0]     // XOR: c[2]^c[1]^c[0] These are unary operators that have only one operand (similar to the NOT operators ! and ~). You can also invert the outputs of these to create NAND, NOR, and XNOR gates, e.g., (~&amp; d[7:0]).</p>"}, {"location": "yuyan/Verilog/1/#error-prone-points", "title": "Error-prone points", "text": "Verilog<pre><code>module top_module( \n    input [254:0] in,\n    output [7:0] out );\n    integer i;\n    always @(*) begin\n        out = 0;\n        for(i = 0; i &lt; 255; i = i + 1) begin\n            if(in[i] == 1) out=out+ 1;\n        end\n    end\nendmodule\n</code></pre>"}]}